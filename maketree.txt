//main.cpp

//helper functions

parse(){

	....

	return [leftstring, op_string, rightstring];
}

Expression makeRoot(){
	root_array=parse(string user_input);      //parse initial expression
	if root_array[1]="+": 
		return Addition(leftstring, rightstring);         //make a different expression object depending on the operator.
	else if root_array[1]="-": 
		return Subtraction(leftstring, rightstring);
	....
}


int makeTree(Expression RootExpression, bool left){   //recursive function to build the Expression tree.
	if RootExpression.leaf==True:
		return 0;
	else:
		if left: 
			child_array=parse(string RootExpression.leftstring);
		else: 
			child_array=parse(string RootExpression.rightstring);

		
		if child_array[1]="+": 
			Addition Child= new Addition(child_array[0],child_array[2]);
		else if child_array[1]="-":
			Subtraction Child=new Subtraction(child_array[0], child_array[2]);
		....


		if left:
			RootExpression.left*->Child.evaluate();   //pointer to the evaluate function of the child
		else:
			RootExpression.right*->Child.evaluate();

		makeTree(Child, left);
		makeTree(Child, right);			

}

Expression root= makeRoot();
cout<<root.evaluate();


//Addition.cpp//


	-bool leaf 		//is it a leaf node
	-leftstring
	-rightstring 	//member variables
	-left*
	-right*

Addition(): leftstring(leftstring), rightstring(righstring), leaf(False){
	if leftstring==number and rightstring==number:
		leaf=True;
}
	

double evaluate():		
	if leaf:
		return stod(leftstring)+stod(rightstring);
	else:
		return left*+right*;

...





